package test;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Stack;

public class Q3 {
	private static final HashMap<String, Class<Expression>> factory = new HashMap<>();

	public static double calc(String expression) {
		LinkedList<String> queue = new LinkedList<>();
		Stack<String> stack = new Stack<>();
		int len = expression.length();
		String token;
		for (int i = 0; i < len; i++) {
			if (expression.charAt(i) <= '9' && expression.charAt(i) >= '0') {
				String num = expression.charAt(i) + "";
				while (i + 1 < len && (expression.charAt(i + 1) <= '9' && expression.charAt(i + 1) >= '0'))
					num = num + expression.charAt(i++);
				token = num;
			} else
				token = expression.charAt(i) + "";

			switch (token) {
			case "-":
				while (!stack.isEmpty() && (stack.peek().equals("*") || stack.peek().equals("/"))) {
					queue.addLast(stack.pop());
				}
				stack.push(token);
				break;
			case "+":
				while (!stack.isEmpty() && (stack.peek().equals("*") || stack.peek().equals("/"))) {
					queue.addLast(stack.pop());
				}
				stack.push(token);
				break;
			case "*":
				stack.push(token);
				break;
			case "/":
				stack.push(token);
				break;
			case "(":
				stack.push(token);
				break;
			case ")":
				while (!stack.isEmpty() && !stack.peek().equals("(")) {
					queue.addLast(stack.pop());
				}
				stack.pop();
				break;
			default:
				queue.addLast(token);
				break;
			}
		}
		while (!stack.isEmpty())
			queue.addLast(stack.pop());

		Expression exp = f(queue);

		return exp.calculate();
	}

	private static Expression f(LinkedList<String> queue) {
		String exp = queue.removeLast();
		Expression returnedExp = null;
		if (exp.equals("+") || exp.equals("-") || exp.equals("*") || exp.equals("/")) {
			Expression right = f(queue);
			Expression left = f(queue);

			switch (exp) {
			case "+":
				returnedExp = new Plus(left, right);
				break;
			case "-":
				returnedExp = new Minus(left, right);
				break;
			case "*":
				returnedExp = new Mul(left, right);
				break;
			case "/":
				returnedExp = new Div(left, right);
				break;
			default:
				break;
			}

		} else
			returnedExp = new Number(Double.parseDouble(exp));

		return returnedExp;
	}

	private static void initializeFactory() {

	}
}

package test;

import java.util.LinkedList;
import java.util.Stack;

public class Q3 {
	public static double calc(String expression) {
		LinkedList<String> queue = new LinkedList<>();
		Stack<String> stack = new Stack<>();
		int len = expression.length();
		String token;
		for (int i = 0; i < len; i++) {
			if (expression.charAt(i) <= '9' && expression.charAt(i) >= '0') {
				String num = expression.charAt(i++) + "";
				while (i < len && (expression.charAt(i) <= '9' && expression.charAt(i) >= 0))
					num = num + expression.charAt(i++);
				token = num;
			} else
				token = expression.charAt(i) + "";

			switch (token) {
			case "-":
				while (stack.size() > 0 && (stack.peek() == "*" || stack.peek() == "/")) {
					queue.addFirst(stack.pop());
				}
				stack.push(token);
				break;
			case "+":
				while (stack.size() > 0 && (stack.peek() == "*" || stack.peek() == "/")) {
					queue.addFirst(stack.pop());
				}
				stack.push(token);
				break;
			case "*":
				stack.push(token);
				break;
			case "/":
				stack.push(token);
				break;
			case "(":
				stack.push(token);
				break;
			case ")":
				while (stack.size() > 0 && stack.peek() != "(") {
					queue.addFirst(stack.pop());
				}
				stack.pop();
				break;
			default:
				queue.addFirst(token);
				break;
			}
		}
		System.out.println(queue.size());
		System.out.println(stack.size());
		return 0;
	}
}

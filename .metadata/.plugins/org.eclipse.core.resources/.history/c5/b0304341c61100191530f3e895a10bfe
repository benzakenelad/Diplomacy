package test;

import java.util.Comparator;
import java.util.HashMap;
import java.util.PriorityQueue;

public class Controller {

	public interface Command {
		int getID();

		void execute();
	}

	public class ACommand {
		protected long executionTime = 0;
		protected Command cmd;

		public ACommand(Command cmd) {
			this.cmd = cmd;
		}

		public void execute() {
			long startTime = System.currentTimeMillis();
			cmd.execute();
			this.executionTime = System.currentTimeMillis() - startTime;
		}

	}

	PriorityQueue<ACommand> queue;
	HashMap<Integer, ACommand> map;

	public Controller() {
		queue = new PriorityQueue<>(new Comparator<ACommand>() {

			@Override
			public int compare(ACommand o1, ACommand o2) {
				return (int) (o1.executionTime - o2.executionTime);
			}
		});
		map = new HashMap<>();
	}

	public void insertCommand(Command c) {
		ACommand acmd = map.get(c.getID());
		if (acmd == null) {
			acmd = new ACommand(c);
			map.put(c.getID(), acmd);
		}
		queue.add(acmd);
	}

	public void executeOne() {
		if (!queue.isEmpty())
			queue.poll().execute();
	}

	public void executeAll() {
		while (!queue.isEmpty())
			queue.poll().execute();
	}
}
